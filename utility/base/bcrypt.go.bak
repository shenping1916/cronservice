package base

import (
	"math/rand"
	log "iceberg/frame/icelog"
	"golang.org/x/crypto/bcrypt"
)

const (
	letterBytes = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
)

const (
	letterIdxBits = 6
	letterIdxMask = 1<<letterIdxBits - 1
	letterIdxMax  = 63 / letterIdxBits
)

func RandString(n int) string {
	b := make([]byte, n)
	// A rand.Int63() generates 63 random bits, enough for letterIdxMax letters!
	for i, cache, remain := n-1, rand.Int63(), letterIdxMax; i >= 0; {
		if remain == 0 {
			cache, remain = rand.Int63(), letterIdxMax
		}
		if idx := int(cache & letterIdxMask); idx < len(letterBytes) {
			b[i] = letterBytes[idx]
			i--
		}
		cache >>= letterIdxBits
		remain--
	}

	return BytesToString(b)
}

func Encryption(n int) map[string]string {
	randstring := RandString(n)
	hash, err := bcrypt.GenerateFromPassword([]byte(randstring), bcrypt.DefaultCost)
	if err != nil {
		log.Errorf(err.Error())
		return nil
	}

	return map[string]string{
		"encrypt": string(hash),
		"meta": randstring,
	}
}

func Verify(encodepwd string, randstring string) bool {
	err := bcrypt.CompareHashAndPassword([]byte(encodepwd), []byte(randstring))
	if err != nil {
		log.Error(err.Error())
		return false
	}

	return true
}
